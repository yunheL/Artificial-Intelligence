/*
 * Question credit to "Cracking the coding
 * Interview" 4th edition by Laakmann.
 */
package leetCodePractice;

import java.util.Arrays;

/*
 * Given a String S, this class recursively
 * generate all the permutations of the S.
 */
public class stringPermutation {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String test = "this";
		recursiveInsert(test, "a");

	}
	
	/*
	 * Given String S, and Single-char String C. This 
	 * method create all possible permutations that can
	 * be generated by inserting C into S.
	 */
	public static void recursiveInsert(String S, String C){
		String[] charList = S.split("");
		int possibleCombo = S.length() + 1;
		String[] generatedArrays = new String[possibleCombo];
		String generatedString = "initialString";
		
		int i = 0;
		for(; i<charList.length; i++)
		{
			//reset generatedString for this iteration
			generatedString = "";
			
			//put the single-char Strings before i into the
			//generated String
			int j = 0;
			for(; j<=i; j++)
			{
				//TODO - 
				//generatedString.substring(j) = charList[j]; 
			}
		}
		
		//System.out.println(Arrays.toString(charList));
		
	}
	
	

}
